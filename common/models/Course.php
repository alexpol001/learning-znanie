<?php

namespace common\models;

use common\components\Common;
use Yii;
use yii\helpers\ArrayHelper;
use yii\web\NotFoundHttpException;
use yii\web\UploadedFile;
use zabachok\behaviors\SluggableBehavior;

/**
 * This is the model class for table "{{%course}}".
 *
 * @property int $id
 * @property string $title
 * @property string $slug
 * @property int $price
 * @property int $hours
 * @property string $image
 * @property int $type
 * @property int $test_time
 * @property string $description
 * @property string $document
 * @property array $modules
 */
class Course extends \yii\db\ActiveRecord
{
    public $file;
    public $documentFile;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%course}}';
    }

    public function behaviors()
    {
        return [
            [
                'class' => SluggableBehavior::className(),
                'attribute' => 'title',
                'ensureUnique' => true
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title', 'slug', 'price', 'hours', 'type'], 'required'],
            [['price', 'hours', 'type', 'test_time'], 'integer'],
            [['title', 'slug'], 'string', 'max' => 256],
            [['description', 'image', 'document'], 'string'],
            ['file', 'image'],
            [['test_time'], 'default', 'value' => 60],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Название',
            'price' => 'Цена',
            'hours' => 'Часы',
            'image' => 'Логотип',
            'file' => 'Логотип',
            'type' => 'Категория',
            'test_time' => 'Время на экзамен (минуты)',
            'documentFile' => 'Выдоваемый документ',
            'description' => 'Описание курса'
        ];
    }

    /**
     * @param $slug
     * @return Course|null
     * @throws NotFoundHttpException
     */
    public static function findModelBySlug($slug)
    {
        $model = self::findOne(['slug' => $slug]);
        Common::throwException($model);
        return $model;
    }

    public function getQuestions()
    {
        return $this->hasMany(Question::className(), ['course_id' => 'id']);
    }

    public function getModules()
    {
        return $this->hasMany(CourseModule::className(), ['course_id' => 'id']);
    }

    public static function getCourseByTypeAndOutStudentCourse($type, $StudentCourses = null)
    {
        $courses = self::find()
            ->where(['type' => $type]);
        if ($StudentCourses) {
            foreach ($StudentCourses as $studentCourse) {
                $courses->andWhere(['!=', 'id', $studentCourse['course_id']]);
            }
        }
        return $courses->all();
    }

    public function beforeSave($insert)
    {
        if ($file = UploadedFile::getInstance($this, 'file')) {
            $dir = Yii::getAlias('@course_image');
            $this->deleteImage($dir . '/' . $this->image);
            $this->image = 'logo_' . $this->slug . '.' . $file->extension;
            $file->saveAs($dir . '/' . $this->image);
        }
        if ($file = UploadedFile::getInstance($this, 'documentFile')) {
            $dir = Yii::getAlias('@course_document');
            $this->deleteImage($dir . '/' . $this->document);
            $this->document = 'document_' . $this->slug . '.' . $file->extension;
            $file->saveAs($dir . '/' . $this->document);
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function beforeDelete()
    {
        Common::deleteAll(StudentCourse::findAll(['course_id' => $this->id]));
        Common::deleteAll(CourseModule::findAll(['course_id' => $this->id]));
        Common::deleteAll(Question::findAll(['course_id' => $this->id]));
        $dir = Yii::getAlias('@course_image');
        $this->deleteImage($dir . '/' . $this->image);
        $dir = Yii::getAlias('@course_document');
        $this->deleteImage($dir . '/' . $this->document);
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    private function deleteImage($path)
    {
        if (file_exists($path)) {
            @unlink($path);
        }
    }
}
